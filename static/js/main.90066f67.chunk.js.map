{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","updatedZip","event","a","zip","target","value","linkToAPI","setState","zipcode","axios","get","response","data","found","console","log","status","updatedCity","city","toUpperCase","cityName","placeZips","foundZips","makeTableZip","currData","state","output","i","length","push","className","City","State","Country","Lat","Long","EstimatedPopulation","TotalWages","makeTableCity","bind","this","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90066f67.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //the default state of the state\r\n    this.state = {\r\n      zipcode: \"\", //no zipcode\r\n      data: [], //no results\r\n      cityName: \"\",\r\n      placeZips: [], //need for city search app\r\n      found: false, //this is for the zipcode search part\r\n      foundZips: false, //this is for the city search zipcode part\r\n    };\r\n\r\n    //if it does get updated, bind that result to the state.\r\n    this.updatedZip = this.updatedZip.bind(this);\r\n    this.updatedCity = this.updatedCity.bind(this);\r\n  }\r\n\r\n  //the code that changes the page and gets the zipcode information\r\n  updatedZip = async (event) => {\r\n    let zip = event.target.value;\r\n    let linkToAPI = \"https://ctp-zip-api.herokuapp.com/zip/\" + zip; //link to the api\r\n\r\n    this.setState({\r\n      zipcode: zip,\r\n    });\r\n    //console.log(this.state.zipcode);\r\n\r\n    //if the zipcode is valid we store the data of the citie into the state and found is true\r\n    try {\r\n      let response = await axios.get(linkToAPI);\r\n      this.setState({ data: response.data, found: true });\r\n    } catch (error) {\r\n      //If there was an invalid zipcode we send errors into our console and setstate to false\r\n      if (error.response) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        this.setState({ found: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  //update city method below\r\n  updatedCity = async (event) => {\r\n    let city = event.target.value;\r\n    let linkToAPI =\r\n      \"http://ctp-zip-api.herokuapp.com/city/\" + city.toUpperCase(); //link to api\r\n    this.setState({\r\n      cityName: city,\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(linkToAPI);\r\n      this.setState({ placeZips: response.data, foundZips: true });\r\n    } catch (error) {\r\n      if (error.response) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        this.setState({ foundZips: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  //set up output for the first part where the user enters a zipcode and it will output city information\r\n  makeTableZip = () => {\r\n    let currData = this.state.data;\r\n    let foundMatch = this.state.found;\r\n    let output = [];\r\n    if (!foundMatch) {\r\n      return <div className=\"centering\">Please enter a valid zip code </div>;\r\n    } else {\r\n      //For loop is needed because the way the data is set up it is set up in an array, so need to iterate through it\r\n      for (let i = 0; i < currData.length; i++) {\r\n        output.push(\r\n          <div className= \"background\">\r\n            <h1>{currData[i].City}</h1>\r\n            {/* print the city in which lands in the zipcode*/}\r\n            {/* an unordered list of the needed things\r\n          - state\r\n          - location\r\n          - population\r\n          - total wages */}\r\n            <ul>\r\n              <li>State: {currData[i].State}</li>\r\n              <li>Country: {currData[i].Country}</li>\r\n              <li>Location: ({currData[i].Lat},{currData[i].Long})</li>\r\n              <li>Population (Estimated): {currData[i].EstimatedPopulation}</li>\r\n              <li>Total Wages: ${currData[i].TotalWages + '.00'}</li>\r\n            </ul>\r\n          </div>\r\n        );\r\n      }\r\n      return output;\r\n    }\r\n  };\r\n\r\n  //set up output for the second part where user inputs a city and outputs all the zipcodes associated with the city\r\n  makeTableCity = () => {\r\n    let currData = this.state.placeZips;\r\n    let foundMatch = this.state.foundZips;\r\n    let output = [];\r\n    if (!foundMatch) {\r\n      return <div className=\"centering\">Please enter a valid city </div>;\r\n    } else {\r\n      //For loop is needed because the way the data is set up it is set up in an array, so need to iterate through it\r\n      for (let i = 0; i < currData.length; i++) {\r\n        output.push(\r\n          <div>\r\n            <ul>\r\n              <li className=\"zipcodeList\">{currData[i]}</li>\r\n            </ul>\r\n          </div>\r\n        );\r\n      }\r\n      return output;\r\n    }\r\n  };\r\n  //after all the work is done, this is final bit that it should do.\r\n  render() {\r\n    //console.log(this.state.data);\r\n    return (\r\n      <div className = \"App\">\r\n        <div className = \"App-header\">\r\n          <h2>Zip Code and City Name Search </h2>\r\n        </div>\r\n        <div>\r\n          <div>\r\n          \r\n            <div className = \"centering\">\r\n              {/* input the zipcode to be searched\r\n            when the field is changed, then it triggers the screen to change. */}\r\n            \r\n              ZIP CODE: \r\n              <input\r\n                value={this.state.zipcode}\r\n                onChange={this.updatedZip}\r\n                placeholder = \"Try 11207\"\r\n              ></input>\r\n              {this.makeTableZip()}\r\n            </div>\r\n            {/* Below is the div for city search */}\r\n            <div className=\"centering\">\r\n              CITY NAME: \r\n              <input\r\n                value = {this.state.cityName}\r\n                onChange = {this.updatedCity}\r\n                placeholder = \"Try Brooklyn\"\r\n              ></input>\r\n              {this.makeTableCity()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}